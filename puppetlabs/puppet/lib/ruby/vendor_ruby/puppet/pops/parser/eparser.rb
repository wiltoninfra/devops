#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 872)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'76,78,300,-286,61,71,146,72,-288,146,450,-274,451,300,169,303,344,450',
'-283,467,266,127,342,301,21,20,411,-143,127,149,291,52,149,55,301,67',
'12,293,59,44,47,288,54,45,10,11,-286,170,62,19,418,-288,46,133,-274',
'17,18,126,-144,345,133,-283,267,83,126,128,463,445,462,53,-143,289,128',
'43,79,510,81,82,80,-145,450,60,49,68,69,63,64,65,66,56,146,-140,58,76',
'78,70,321,61,71,322,72,-144,129,130,131,132,399,-187,-187,129,130,131',
'132,149,127,279,278,21,20,127,316,400,-145,420,52,-142,55,315,67,138',
'410,59,44,47,-140,54,45,409,-188,-188,300,62,19,380,395,46,133,-228',
'17,18,126,133,300,303,426,126,83,408,128,-189,-189,301,53,128,428,303',
'43,79,-142,81,82,-183,-183,301,60,49,68,69,63,64,65,66,56,135,136,58',
'76,78,70,291,61,71,463,72,462,129,130,131,132,161,129,130,131,132,287',
'-186,-186,127,336,337,21,20,127,286,76,78,152,52,171,55,435,67,12,382',
'59,44,47,85,54,45,10,11,300,436,62,19,325,324,46,133,283,17,18,126,133',
'303,-189,-189,126,83,342,128,343,301,439,53,128,-184,-184,43,79,282',
'81,82,300,-185,-185,60,49,68,69,63,64,65,66,56,281,303,58,76,78,70,442',
'61,71,301,72,319,129,130,131,132,395,129,130,131,132,-183,-183,334,127',
'135,136,21,20,127,-188,-188,-186,-186,52,395,55,300,67,12,152,59,44',
'47,396,54,45,10,11,279,278,62,19,279,278,46,133,395,17,18,126,133,-187',
'-187,452,126,83,453,128,279,278,303,53,128,456,457,43,79,392,81,82,95',
'95,460,60,49,68,69,63,64,65,66,56,390,464,58,76,78,70,466,61,71,319',
'72,514,129,130,131,132,268,129,130,131,132,323,87,199,127,475,196,21',
'20,127,477,478,386,342,52,194,55,384,67,12,379,59,44,47,375,54,45,10',
'11,482,373,62,19,372,484,46,133,414,17,18,126,133,87,487,488,126,83',
'342,128,161,350,491,53,128,153,152,43,79,95,81,82,95,495,466,60,49,68',
'69,63,64,65,66,56,497,498,58,76,78,70,499,61,71,500,72,512,129,130,131',
'132,342,129,130,131,132,95,95,505,127,506,507,21,20,127,508,509,123',
'342,52,95,55,161,67,12,87,59,44,47,518,54,45,10,11,519,520,62,19,84',
'522,46,133,523,17,18,126,133,524,375,,126,83,,128,,,,53,128,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,129,130',
'131,132,,129,130,131,132,,,,127,,,21,20,127,,,,,52,-273,55,,67,138,',
'59,44,47,,54,45,,,,,62,19,,,46,133,,17,18,126,133,,,,126,83,,128,,,',
'53,128,,,43,79,-273,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,129,130,131,132,,129,130,131,132,,,,,,,21,20,,,76,78,,52',
'171,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,',
',,,169,53,,166,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,83,58,76',
'78,70,,61,71,,72,170,79,,,115,,,,,76,78,,,171,,,21,20,117,,120,,114',
'52,116,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,119,,17,18,169',
',,166,,,83,76,78,,,171,53,,,,43,79,96,81,82,,,83,60,49,68,69,63,64,65',
'66,56,170,79,58,76,78,70,,61,71,,72,,,,169,115,,166,,,76,78,,,171,,',
'21,20,117,,120,,114,52,116,55,83,67,138,,59,44,47,,54,45,170,79,,,62',
'19,,,46,119,,17,18,169,,,166,,,83,,,,,,53,88,89,90,43,79,96,81,82,,',
'83,60,49,68,69,63,64,65,66,56,170,79,58,76,78,70,,61,71,,72,,,,,,,,',
',,,,,,,,21,20,,91,93,92,94,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,115,,46,,,17,18,,,,,,,83,117,,120,,114,53,116,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,119,58,76,78,70,115,61,71,,72,,,,,115,97,98',
',,117,,120,96,114,,116,21,20,117,,120,,114,52,116,55,,67,138,,59,44',
'47,,54,45,119,,,,62,19,,,46,119,,17,18,,,97,98,,,83,,,96,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,115,61,71,,72',
',,,,115,,,,,117,,120,,114,,116,21,20,117,,120,,114,52,116,55,,67,138',
',59,44,47,,54,45,119,,,,62,19,,,46,119,,17,18,,,97,98,,,83,,,96,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,115,61,71',
',72,,,,,115,,,,,117,,120,,114,,116,21,20,117,,120,,114,52,116,55,,67',
'138,,59,44,47,,54,45,119,,,,62,19,,,46,119,,17,18,,,,,,,83,,,,,,53,',
',,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,503,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11',
',,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,145,,',
',,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,',
',,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,343,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
'187,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69',
'63,64,65,66,174,183,182,175,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,178,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,',
',,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,185,72,',
',,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63',
'64,65,66,174,183,182,175,76,78,70,,61,71,,72,187,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,176,173,68,69,63,64,65,66,174,183,182',
'175,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,402,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,404,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,198,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,',
',17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,216,235,226,236,67,228,238,230,44,214,,218,212,,,,',
'62,19,239,234,213,,,17,211,,,,,,,83,,,,,237,217,,,,43,79,,81,82,,,,231',
'215,232,233,221,222,223,224,227,241,240,229,76,78,70,,61,71,,72,,,,',
',,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,',
'58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82',
',,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,',
',,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18',
',,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58',
'76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44',
'47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,',
',60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,',
',,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76',
'78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60',
'49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78',
'70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49',
'68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83',
',,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70',
',61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68',
'69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,',
',,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61',
'71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69',
'63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53',
',,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,263,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43',
'79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,468',
',,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,455,,,,,,',
',,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71',
',72,421,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,176,173',
'68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,,72,313,,,,,,,,,,',
',,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,',
'17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56',
',,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81',
'82,,,,176,173,68,69,63,64,65,66,174,183,182,175,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12,,59,44,47,,54,45,10,11,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,305,,,,,52,',
'55,,67,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,',
'53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71',
',72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64',
'65,66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',67,138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,',
'43,79,,81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72',
',,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19',
',,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65',
'66,56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67',
'138,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,,60,49,68,69,63,64,65,66,56,,,58,76,78,70,,61,71,,72,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,67,138,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,83,,,,,,53,,,,43,79,,81,82,,,,60,49,68,69,63,64,65,66',
'56,,,58,76,78,70,,61,71,,72,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,67,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,83,,,,,,53,,,,43,79',
',81,82,,,115,60,49,68,69,63,64,65,66,56,,,58,106,117,70,120,115,114',
',116,,107,,,,,,,,,117,,120,,114,,116,,,,119,,,,,,,,99,100,102,101,104',
'105,,97,98,119,,,115,,96,,,99,100,102,101,,,,97,98,117,,120,,114,96',
'116,,,,,,,,,,,103,,,,,,,,,,119,,,,,,,103,99,100,102,101,115,,306,97',
'98,,,,,,96,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,,,,,,',
',103,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,115,,307,,,96,',
',,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,,,103,,,,,,,119',
',,,113,112,,,99,100,102,101,104,105,,97,98,115,,308,,,96,,,,,,,111,106',
'117,,120,115,114,,116,,107,109,108,110,,,,,,117,,120,103,114,,116,,',
',119,,,,113,112,,,99,100,102,101,104,105,,97,98,119,,,115,,96,,,99,100',
'102,101,104,105,,97,98,117,,120,,114,96,116,,,,115,,,,,,,103,,,,,,,117',
',120,119,114,,116,,,,103,,,102,101,,,,97,98,,,,,,96,,119,,,,,,,,99,100',
'102,101,104,105,,97,98,115,,,,,96,,,,,103,,111,106,117,,120,,114,,116',
',107,109,108,110,,,,,,,,,103,,,,,,,119,,,,113,112,,115,99,100,102,101',
'104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,',
',,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111',
'106,117,96,120,115,114,,116,,107,109,108,110,,,,,106,117,,120,,114,',
'116,,107,,119,,,103,113,112,,,99,100,102,101,104,105,,97,98,119,,,115',
',96,,,99,100,102,101,104,105,,97,98,117,,120,,114,96,116,,,,115,,,,',
',,103,,,,,,106,117,,120,119,114,,116,,107,,103,,,102,101,,,,97,98,,',
',,,96,,119,,,,,,,,99,100,102,101,104,105,,97,98,115,,,,,96,,,,,103,',
',106,117,,120,,114,,116,,107,,,,,,,,,,,,103,,,,,,,119,,,,,115,,,99,100',
'102,101,104,105,,97,98,111,106,117,,120,96,114,,116,,107,109,108,110',
',,,,,,,,,,,,,,,119,,,,,103,,115,99,100,102,101,104,105,,97,98,,,111',
'106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113',
'112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116',
',107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99,100,102,101',
'104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,',
',,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104,105,,97,98,,,111',
'106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113',
'112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116',
',107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,,99,100,102,101,104',
'105,115,97,98,,,,,,96,,,,111,106,117,376,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,103,,,,119,,,,113,112,,,99,100,102,101,104,105,115,97',
'98,,,,,,96,,,,111,106,117,340,120,,114,,116,,107,109,108,110,,,,,,,',
',,,,103,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106',
'117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112',
',115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107',
'109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,115,99,100,102,101,104',
'105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,336,337,',
',,,,,,,,,,,,119,,,103,,112,,,99,100,102,101,104,105,115,97,98,,,346',
',,96,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,,,,,,103,',
',,119,,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96',
'120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113,112,,,99',
'100,102,101,104,105,,97,98,,362,235,361,236,96,359,238,363,,352,,358',
'360,,,,,,,239,234,364,,,,357,,,,,,,,103,,,,237,365,,,,,,,,,,,,368,366',
'369,367,353,354,355,356,370,241,240,371,362,235,361,236,,359,238,363',
',352,,358,360,,,,,,,239,234,364,,,,357,,,,,,,,,,,,237,365,,,,,,,,,,',
',368,366,369,367,353,354,355,356,370,241,240,371,362,235,361,236,,359',
'238,363,,352,,358,360,,,,,,,239,234,364,,,,357,,,,,,,,,,,,237,365,,',
',,,,,,,,,368,366,369,367,353,354,355,356,370,241,240,371,362,235,361',
'236,,359,238,363,,352,,358,360,,,,,,,239,234,364,,,,357,,,,,,,,,,,,237',
'365,,,,,,,,,,,,368,366,369,367,353,354,355,356,370,241,240,371,362,235',
'361,236,,359,238,363,,352,,358,360,,,,,,,239,234,364,,,,357,,,,,,,,',
',,,237,365,,,,,,,,,,,,368,366,369,367,353,354,355,356,370,241,240,371',
'362,235,361,236,,359,238,363,,352,,358,360,,,,,,,239,234,364,,,,357',
',,,,,,,,,,,237,365,,,,,,,,,,,,368,366,369,367,353,354,355,356,370,241',
'240,371' ]
        racc_action_table = arr = ::Array.new(10508, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,152,233,0,0,49,0,232,215,405,212,387,302,316,152,225,387,213,405',
'117,56,441,152,0,0,312,222,379,49,317,0,215,0,302,0,0,152,0,0,0,149',
'0,0,0,0,233,316,0,0,318,232,0,56,212,0,0,56,223,225,379,213,117,0,379',
'56,460,379,460,0,222,149,379,0,0,492,0,0,0,224,492,0,0,0,0,0,0,0,0,0',
'173,214,0,506,506,0,186,506,506,186,506,223,56,56,56,56,304,222,222',
'379,379,379,379,173,231,124,124,506,506,60,164,304,224,320,506,221,506',
'162,506,506,311,506,506,506,214,506,506,310,223,223,395,506,506,278',
'333,506,231,338,506,506,231,60,278,395,339,60,506,309,231,224,224,395',
'506,60,341,278,506,506,221,506,506,214,214,278,506,506,506,506,506,506',
'506,506,506,57,57,506,4,4,506,151,4,4,402,4,402,231,231,231,231,175',
'60,60,60,60,148,221,221,176,426,426,4,4,55,147,194,194,145,4,194,4,347',
'4,4,279,4,4,4,4,4,4,4,4,279,349,4,4,191,191,4,176,144,4,4,176,55,279',
'66,66,55,4,351,176,357,279,374,4,55,61,61,4,4,142,4,4,196,62,62,4,4',
'4,4,4,4,4,4,4,141,196,4,498,498,4,377,498,498,196,498,177,176,176,176',
'176,381,55,55,55,55,47,47,196,160,16,16,498,498,174,65,65,63,63,498',
'383,498,301,498,498,386,498,498,498,300,498,498,498,498,158,158,498',
'498,159,159,498,160,294,498,498,160,174,64,64,389,174,498,390,160,172',
'172,291,498,174,393,394,498,498,290,498,498,122,121,401,498,498,498',
'498,498,498,498,498,498,289,403,498,497,497,498,404,497,497,184,497',
'497,160,160,160,160,118,174,174,174,174,189,86,84,227,412,80,497,497',
'226,417,425,284,427,497,79,497,280,497,497,276,497,497,497,273,497,497',
'497,497,434,272,497,497,270,438,497,227,314,497,497,227,226,200,446',
'447,226,497,448,227,58,265,454,497,226,51,50,497,497,205,497,497,206',
'463,464,497,497,497,497,497,497,497,497,497,466,467,497,495,495,497',
'470,495,495,473,495,495,227,227,227,227,474,226,226,226,226,207,208',
'480,134,481,486,495,495,12,489,490,12,210,495,8,495,229,495,495,5,495',
'495,495,501,495,495,495,495,502,504,495,495,1,511,495,134,513,495,495',
'134,12,515,521,,12,495,,134,,,,495,12,,,495,495,,495,495,,,,495,495',
'495,495,495,495,495,495,495,,,495,218,218,495,,218,218,,218,,134,134',
'134,134,,12,12,12,12,,,,138,,,218,218,228,,,,,218,228,218,,218,218,',
'218,218,218,,218,218,,,,,218,218,,,218,138,,218,218,138,228,,,,228,218',
',138,,,,218,228,,,218,218,228,218,218,,,,218,218,218,218,218,218,218',
'218,218,,,218,10,10,218,,10,10,,10,,138,138,138,138,,228,228,228,228',
',,,,,,10,10,,,59,59,,10,59,10,,10,10,,10,10,10,,10,10,10,10,,,10,10',
',,10,,,10,10,,,,,,,10,,,,,59,10,,59,,10,10,,10,10,,,,10,10,10,10,10',
'10,10,10,10,,59,10,11,11,10,,11,11,,11,59,59,,,243,,,,,315,315,,,315',
',,11,11,243,,243,,243,11,243,11,,11,11,,11,11,11,,11,11,11,11,,,11,11',
',,11,243,,11,11,315,,,315,,,11,414,414,,,414,11,,,,11,11,243,11,11,',
',315,11,11,11,11,11,11,11,11,11,315,315,11,217,217,11,,217,217,,217',
',,,414,244,,414,,,230,230,,,230,,,217,217,244,,244,,244,217,244,217',
'414,217,217,,217,217,217,,217,217,414,414,,,217,217,,,217,244,,217,217',
'230,,,230,,,217,,,,,,217,7,7,7,217,217,244,217,217,,,230,217,217,217',
'217,217,217,217,217,217,230,230,217,477,477,217,,477,477,,477,,,,,,',
',,,,,,,,,,477,477,,7,7,7,7,477,,477,,477,477,,477,477,477,,477,477,477',
'477,,,477,477,249,,477,,,477,477,,,,,,,477,249,,249,,249,477,249,,,477',
'477,,477,477,,,,477,477,477,477,477,477,477,477,477,,249,477,17,17,477',
'247,17,17,,17,,,,,242,249,249,,,247,,247,249,247,,247,17,17,242,,242',
',242,17,242,17,,17,17,,17,17,17,,17,17,247,,,,17,17,,,17,242,,17,17',
',,247,247,,,17,,,247,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,17,17,17',
'17,,,17,18,18,17,248,18,18,,18,,,,,137,,,,,248,,248,,248,,248,18,18',
'137,,137,,137,18,137,18,,18,18,,18,18,18,,18,18,248,,,,18,18,,,18,137',
',18,18,,,248,248,,,18,,,248,,,18,,,,18,18,,18,18,,,,18,18,18,18,18,18',
'18,18,18,,,18,19,19,18,139,19,19,,19,,,,,140,,,,,139,,139,,139,,139',
'19,19,140,,140,,140,19,140,19,,19,19,,19,19,19,,19,19,139,,,,19,19,',
',19,140,,19,19,,,,,,,19,,,,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,19',
'19,19,19,,,19,20,20,19,,20,20,,20,,,,,,,,,,,,,,,,,20,20,,,,,,20,,20',
',20,20,,20,20,20,,20,20,20,20,,,20,20,,,20,,,20,20,,,,,,,20,,,,,,20',
',,,20,20,,20,20,,,,20,20,20,20,20,20,20,20,20,,,20,21,21,20,,21,21,',
'21,,,,,,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21,21,',
',21,21,,,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21,21,21',
'21,21,21,21,21,,,21,475,475,21,,475,475,,475,475,,,,,,,,,,,,,,,,475',
'475,,,,,,475,,475,,475,475,,475,475,475,,475,475,475,475,,,475,475,',
',475,,,475,475,,,,,,,475,,,,,,475,,,,475,475,,475,475,,,,475,475,475',
'475,475,475,475,475,475,,,475,48,48,475,,48,48,,48,,,,,,,,,,,,,,,,,48',
'48,48,,,,,48,,48,,48,48,,48,48,48,,48,48,48,48,,,48,48,,,48,,,48,48',
',,,,,,48,,,,,,48,,,,48,48,,48,48,,,,48,48,48,48,48,48,48,48,48,,,48',
'462,462,48,,462,462,,462,,,,,,,,,,,,,,,,,462,462,,,,,,462,,462,,462',
'462,,462,462,462,,462,462,,,,,462,462,,,462,,,462,462,,,,,,,462,,,,',
',462,,,,462,462,,462,462,,,,462,462,462,462,462,462,462,462,462,,,462',
'216,216,462,,216,216,,216,,,,,,,,,,,,,,,,,216,216,,,,,,216,,216,,216',
'216,,216,216,216,,216,216,,,,,216,216,,,216,,,216,216,,,,,,,216,,,,',
',216,,,,216,216,,216,216,,,,216,216,216,216,216,216,216,216,216,,,216',
'456,456,216,,456,456,,456,,,,,,,,,,,,,,,,,456,456,,,,,,456,,456,,456',
'456,,456,456,456,,456,456,,,,,456,456,,,456,,,456,456,,,,,,,456,,,,',
',456,,,,456,456,,456,456,,,,456,456,456,456,456,456,456,456,456,,,456',
'52,52,456,,52,52,,52,,,,,,,,,,,,,,,,,52,52,,,,,,52,,52,,52,52,,52,52',
'52,,52,52,,,,,52,52,,,52,,,52,52,,,,,,,52,,,,,,52,,,,52,52,,52,52,,',
',52,52,52,52,52,52,52,52,52,,,52,53,53,52,,53,53,,53,,,,,,,,,,,,,,,',
',53,53,,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,53,,',
',,,,53,,,,,,53,,,,53,53,,53,53,,,,53,53,53,53,53,53,53,53,53,,,53,54',
'54,53,,54,54,,54,,,,,,,,,,,,,,,,,54,54,,,,,,54,,54,,54,54,,54,54,54',
',54,54,,,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54',
'54,54,54,54,54,54,54,54,,,54,211,211,54,,211,211,,211,,,211,,,,,,,,',
',,,,,211,211,,,,,,211,,211,,211,211,,211,211,211,,211,211,,,,,211,211',
',,211,,,211,211,,,,,,,211,,,,,,211,,,,211,211,,211,211,,,,211,211,211',
'211,211,211,211,211,211,,,211,263,263,211,,263,263,,263,,,,,,,,,,,,',
',,,,263,263,,,,,,263,,263,,263,263,,263,263,263,,263,263,,,,,263,263',
',,263,,,263,263,,,,,,,263,,,,,,263,,,,263,263,,263,263,,,,263,263,263',
'263,263,263,263,263,263,,,263,453,453,263,,453,453,,453,,,,,,,,,,,,',
',,,,453,453,,,,,,453,,453,,453,453,,453,453,453,,453,453,453,453,,,453',
'453,,,453,,,453,453,,,,,,,453,,,,,,453,,,,453,453,,453,453,,,,453,453',
'453,453,453,453,453,453,453,,,453,450,450,453,,450,450,,450,,,,,,,,',
',,,,,,,,450,450,,,,,,450,,450,,450,450,,450,450,450,,450,450,,,,,450',
'450,,,450,,,450,450,,,,,,,450,,,,,,450,,,,450,450,,450,450,,,,450,450',
'450,450,450,450,450,450,450,,,450,198,198,450,,198,198,,198,198,,,,',
',,,,,,,,,,,198,198,,,,,,198,,198,,198,198,,198,198,198,,198,198,198',
'198,,,198,198,,,198,,,198,198,,,,,,,198,,,,,,198,,,,198,198,,198,198',
',,,198,198,198,198,198,198,198,198,198,198,198,198,195,195,198,,195',
'195,,195,,,,,,,,,,,,,,,,,195,195,,,,,,195,,195,,195,195,,195,195,195',
',195,195,195,195,,,195,195,,,195,,,195,195,,,,,,,195,,,,,,195,,,,195',
'195,,195,195,,,,195,195,195,195,195,195,195,195,195,,,195,442,442,195',
',442,442,,442,,,,,,,,,,,,,,,,,442,442,,,,,,442,,442,,442,442,,442,442',
'442,,442,442,442,442,,,442,442,,,442,,,442,442,,,,,,,442,,,,,,442,,',
',442,442,,442,442,,,,442,442,442,442,442,442,442,442,442,,,442,283,283',
'442,,283,283,,283,,,,,,,,,,,,,,,,,283,283,,,,,,283,,283,,283,283,,283',
'283,283,,283,283,283,283,,,283,283,,,283,,,283,283,,,,,,,283,,,,,,283',
',,,283,283,,283,283,,,,283,283,283,283,283,283,283,283,283,,,283,435',
'435,283,,435,435,,435,,,,,,,,,,,,,,,,,435,435,,,,,,435,,435,,435,435',
',435,435,435,,435,435,,,,,435,435,,,435,,,435,435,,,,,,,435,,,,,,435',
',,,435,435,,435,435,,,,435,435,435,435,435,435,435,435,435,,,435,286',
'286,435,,286,286,,286,,,,,,,,,,,,,,,,,286,286,,,,,,286,,286,,286,286',
',286,286,286,,286,286,,,,,286,286,,,286,,,286,286,,,,,,,286,,,,,,286',
',,,286,286,,286,286,,,,286,286,286,286,286,286,286,286,286,,,286,287',
'287,286,,287,287,,287,,,,,,,,,,,,,,,,,287,287,,,,,,287,,287,,287,287',
',287,287,287,,287,287,,,,,287,287,,,287,,,287,287,,,,,,,287,,,,,,287',
',,,287,287,,287,287,,,,287,287,287,287,287,287,287,287,287,,,287,288',
'288,287,,288,288,,288,,,,,,,,,,,,,,,,,288,288,,,,,,288,,288,,288,288',
',288,288,288,,288,288,288,288,,,288,288,,,288,,,288,288,,,,,,,288,,',
',,,288,,,,288,288,,288,288,,,,288,288,288,288,288,288,288,288,288,,',
'288,70,70,288,,70,70,70,70,,,,,,,,,,,,,,,,,70,70,,,,,,70,,70,,70,70',
',70,70,70,,70,70,70,70,,,70,70,,,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70',
',70,70,,,,70,70,70,70,70,70,70,70,70,70,70,70,71,71,70,,71,71,71,71',
',,,,,,,,,,,,,,,,71,71,,,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71',
'71,,,71,,,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71',
'71,71,71,71,71,71,72,72,71,,72,72,,72,72,,,,,,,,,,,,,,,,72,72,,,,,,72',
',72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,',
',72,,,,72,72,,72,72,,,,72,72,72,72,72,72,72,72,72,72,72,72,343,343,72',
',343,343,,343,,,,,,,,,,,,,,,,,343,343,,,,,,343,,343,,343,343,,343,343',
'343,,343,343,,,,,343,343,,,343,,,343,343,,,,,,,343,,,,,,343,,,,343,343',
',343,343,,,,343,343,343,343,343,343,343,343,343,,,343,306,306,343,,306',
'306,,306,306,,,,,,,,,,,,,,,,306,306,,,,,,306,,306,,306,306,,306,306',
'306,,306,306,306,306,,,306,306,,,306,,,306,306,,,,,,,306,,,,,,306,,',
',306,306,,306,306,,,,306,306,306,306,306,306,306,306,306,,,306,307,307',
'306,,307,307,,307,307,,,,,,,,,,,,,,,,307,307,,,,,,307,,307,,307,307',
',307,307,307,,307,307,307,307,,,307,307,,,307,,,307,307,,,,,,,307,,',
',,,307,,,,307,307,,307,307,,,,307,307,307,307,307,307,307,307,307,,',
'307,82,82,307,,82,82,,82,,,,,,,,,,,,,,,,,82,82,,,,,,82,,82,,82,82,,82',
'82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,,,,82,82,,82,82',
',,,82,82,82,82,82,82,82,82,82,,,82,308,308,82,,308,308,,308,,,,,,,,',
',,,,,,,,308,308,,,,,,308,,308,,308,308,,308,308,308,,308,308,,,,,308',
'308,,,308,,,308,308,,,,,,,308,,,,,,308,,,,308,308,,308,308,,,,308,308',
'308,308,308,308,308,308,308,,,308,85,85,308,,85,85,,85,,,,,,,,,,,,,',
',,,85,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85',
'85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85,85,85,,',
'85,409,409,85,,409,409,,409,,,,,,,,,,,,,,,,,409,409,,,,,,409,,409,,409',
'409,,409,409,409,,409,409,409,409,,,409,409,,,409,,,409,409,,,,,,,409',
',,,,,409,,,,409,409,,409,409,,,,409,409,409,409,409,409,409,409,409',
',,409,87,87,409,,87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87,87',
',87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87',
',87,87,,,,87,87,87,87,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,,,,',
',,,,,,,,,,88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,',
'88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88',
'88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89',
'89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89',
'89,,89,89,,,,89,89,89,89,89,89,89,89,89,,,89,90,90,89,,90,90,,90,,,',
',,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90',
',,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90',
'90,90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91',
'91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91',
'91,,91,91,,,,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92,92,,92,,,',
',,,,,,,,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92',
',,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92',
'92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93',
'93,,93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93',
'93,,93,93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,',
',,,,,,,,,,,,,94,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,94,94,,,94,94',
',,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94',
'94,94,,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,95,,,,,,95,95,95,95',
'95,95,95,95,95,95,,95,95,,,,,95,95,95,95,95,,,95,95,,,,,,,95,,,,,95',
'95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,95,95,95,96,96,95,',
'96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96',
',,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96',
'96,96,96,96,96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,',
',,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,',
',,97,,,,97,97,,97,97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98',
'98,,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,',
',98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98',
'98,98,98,98,98,,,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,99,,,,,,99',
',99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99',
',,,99,99,,99,99,,,,99,99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100',
',100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100,100,,100',
'100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100',
',,,100,100,100,100,100,100,100,100,100,,,100,101,101,100,,101,101,,101',
',,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101',
',,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,',
',,101,101,101,101,101,101,101,101,101,,,101,102,102,101,,102,102,,102',
',,,,,,,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102',
',,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,',
',,102,102,102,102,102,102,102,102,102,,,102,103,103,102,,103,103,,103',
',,,,,,,,,,,,,,,,103,103,,,,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,',
',,103,103,103,103,103,103,103,103,103,,,103,104,104,103,,104,104,,104',
',,,,,,,,,,,,,,,,104,104,,,,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,',
',,104,104,104,104,104,104,104,104,104,,,104,105,105,104,,105,105,,105',
',,,,,,,,,,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105,105,,105,105',
',,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,',
',,105,105,105,105,105,105,105,105,105,,,105,106,106,105,,106,106,,106',
',,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106',
',,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,',
',,106,106,106,106,106,106,106,106,106,,,106,107,107,106,,107,107,,107',
',,,,,,,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107,107,,107,107',
',,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,',
',,107,107,107,107,107,107,107,107,107,,,107,108,108,107,,108,108,,108',
',,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108,108',
',,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,',
',,108,108,108,108,108,108,108,108,108,,,108,109,109,108,,109,109,,109',
',,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109',
',,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,',
',,109,109,109,109,109,109,109,109,109,,,109,110,110,109,,110,110,,110',
',,,,,,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110',
',,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,',
',,110,110,110,110,110,110,110,110,110,,,110,111,111,110,,111,111,,111',
',,,,,,,,,,,,,,,,111,111,,,,,,111,,111,,111,111,,111,111,111,,111,111',
',,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,',
',,111,111,111,111,111,111,111,111,111,,,111,112,112,111,,112,112,,112',
',,,,,,,,,,,,,,,,112,112,,,,,,112,,112,,112,112,,112,112,112,,112,112',
',,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,',
',,112,112,112,112,112,112,112,112,112,,,112,113,113,112,,113,113,,113',
',,,,,,,,,,,,,,,,113,113,,,,,,113,,113,,113,113,,113,113,113,,113,113',
',,,,113,113,,,113,,,113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113,',
',,113,113,113,113,113,113,113,113,113,,,113,114,114,113,,114,114,,114',
',,,,,,,,,,,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114',
',,,,114,114,,,114,,,114,114,,,,,,,114,,,,,,114,,,114,114,114,,114,114',
',,,114,114,114,114,114,114,114,114,114,,,114,115,115,114,,115,115,,115',
',,,,,,,,,,,,,,,,115,115,,,,,,115,,115,,115,115,,115,115,115,,115,115',
',,,,115,115,,,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,',
',,115,115,115,115,115,115,115,115,115,,,115,408,408,115,,408,408,,408',
',,,,,,,,,,,,,,,,408,408,,,,,,408,,408,,408,408,,408,408,408,,408,408',
'408,408,,,408,408,,,408,,,408,408,,,,,,,408,,,,,,408,,,,408,408,,408',
'408,,,,408,408,408,408,408,408,408,408,408,,,408,406,406,408,,406,406',
',406,406,,,,,,,,,,,,,,,,406,406,,,,,,406,,406,,406,406,,406,406,406',
',406,406,,,,,406,406,,,406,,,406,406,,,,,,,406,,,,,,406,,,,406,406,',
'406,406,,,,406,406,406,406,406,406,406,406,406,,,406,119,119,406,,119',
'119,,119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119,119',
',119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119,',
'119,119,,,,119,119,119,119,119,119,119,119,119,,,119,120,120,119,,120',
'120,,120,,,,,,,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120',
',120,120,,,,,120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,',
'120,120,,,,120,120,120,120,120,120,120,120,120,,,120,399,399,120,,399',
'399,,399,,,,,,,,,,,,,,,,,399,399,,,,,,399,,399,,399,399,,399,399,399',
',399,399,399,399,,,399,399,,,399,,,399,399,,,,,,,399,,,,,,399,,,,399',
'399,,399,399,,,,399,399,399,399,399,399,399,399,399,,,399,396,396,399',
',396,396,,396,,,,,,,,,,,,,,,,,396,396,,,,,,396,,396,,396,396,,396,396',
'396,,396,396,,,,,396,396,,,396,,,396,396,,,,,,,396,,,,,,396,,,,396,396',
',396,396,,,,396,396,396,396,396,396,396,396,396,,,396,123,123,396,,123',
'123,,123,,,,,,,,,,,,,,,,,123,123,,,,,,123,,123,,123,123,,123,123,123',
',123,123,,,,,123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,',
'123,123,,,,123,123,123,123,123,123,123,123,123,,,123,392,392,123,,392',
'392,,392,392,,,,,,,,,,,,,,,,392,392,,,,,,392,,392,,392,392,,392,392',
'392,,392,392,392,392,,,392,392,,,392,,,392,392,,,,,,,392,,,,,,392,,',
',392,392,,392,392,,,,392,392,392,392,392,392,392,392,392,,,392,319,319',
'392,,319,319,,319,,,,,,,,,,,,,,,,,319,319,,,,,,319,,319,,319,319,,319',
'319,319,,319,319,319,319,,,319,319,,,319,,,319,319,,,,,,,319,,,,,,319',
',,,319,319,,319,319,,,,319,319,319,319,319,319,319,319,319,319,319,319',
'322,322,319,,322,322,,322,322,,,,,,,,,,,,,,,,322,322,,,,,,322,,322,',
'322,322,,322,322,322,,322,322,322,322,,,322,322,,,322,,,322,322,,,,',
',,322,,,,,,322,,,,322,322,,322,322,,,,322,322,322,322,322,322,322,322',
'322,322,322,322,161,161,322,,161,161,,161,161,,,,,,,,,,,,,,,,161,161',
',,,,,161,,161,,161,161,,161,161,161,,161,161,161,161,,,161,161,,,161',
',,161,161,,,,,,,161,,,,,,161,,,,161,161,,161,161,,,,161,161,161,161',
'161,161,161,161,161,,,161,323,323,161,,323,323,,323,,,,,,,,,,,,,,,,',
'323,323,,,,,,323,,323,,323,323,,323,323,323,,323,323,323,323,,,323,323',
',,323,,,323,323,,,,,,,323,,,,,,323,,,,323,323,,323,323,,,,323,323,323',
'323,323,323,323,323,323,323,323,323,328,328,323,,328,328,,328,,,,,,',
',,,,,,,,,,328,328,,,,,,328,,328,,328,328,,328,328,328,,328,328,328,328',
',,328,328,,,328,,,328,328,,,,,,,328,,,,,,328,,,,328,328,,328,328,,,',
'328,328,328,328,328,328,328,328,328,,,328,153,153,328,,153,153,,153',
',,,,,,,,,,,,,,,,153,153,153,,,,,153,,153,,153,153,,153,153,153,,153',
'153,153,153,,,153,153,,,153,,,153,153,,,,,,,153,,,,,,153,,,,153,153',
',153,153,,,,153,153,153,153,153,153,153,153,153,,,153,375,375,153,,375',
'375,,375,,,,,,,,,,,,,,,,,375,375,,,,,,375,,375,,375,375,,375,375,375',
',375,375,,,,,375,375,,,375,,,375,375,,,,,,,375,,,,,,375,,,,375,375,',
'375,375,,,,375,375,375,375,375,375,375,375,375,,,375,350,350,375,,350',
'350,,350,,,,,,,,,,,,,,,,,350,350,,,,,,350,,350,,350,350,,350,350,350',
',350,350,,,,,350,350,,,350,,,350,350,,,,,,,350,,,,,,350,,,,350,350,',
'350,350,,,,350,350,350,350,350,350,350,350,350,,,350,346,346,350,,346',
'346,,346,,,,,,,,,,,,,,,,,346,346,,,,,,346,,346,,346,346,,346,346,346',
',346,346,,,,,346,346,,,346,,,346,346,,,,,,,346,,,,,,346,,,,346,346,',
'346,346,,,,346,346,346,346,346,346,346,346,346,,,346,345,345,346,,345',
'345,,345,,,,,,,,,,,,,,,,,345,345,,,,,,345,,345,,345,345,,345,345,345',
',345,345,,,,,345,345,,,345,,,345,345,,,,,,,345,,,,,,345,,,,345,345,',
'345,345,,,,345,345,345,345,345,345,345,345,345,,,345,344,344,345,,344',
'344,,344,,,,,,,,,,,,,,,,,344,344,,,,,,344,,344,,344,344,,344,344,344',
',344,344,,,,,344,344,,,344,,,344,344,,,,,,,344,,,,,,344,,,,344,344,',
'344,344,,,,344,344,344,344,344,344,344,344,344,,,344,77,77,344,,77,77',
',77,,,,,,,,,,,,,,,,,77,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,77,77',
',,77,77,,,77,,,77,77,,,,,,,77,,,,,,77,,,,77,77,,77,77,,,254,77,77,77',
'77,77,77,77,77,77,,,77,254,254,77,254,250,254,,254,,254,,,,,,,,,250',
',250,,250,,250,,,,254,,,,,,,,254,254,254,254,254,254,,254,254,250,,',
'251,,254,,,250,250,250,250,,,,250,250,251,,251,,251,250,251,,,,,,,,',
',,254,,,,,,,,,,251,,,,,,,250,251,251,251,251,154,,154,251,251,,,,,,251',
',154,154,154,,154,,154,,154,,154,154,154,154,,,,,,,,,,,,,,251,,154,',
',,154,154,,,154,154,154,154,154,154,,154,154,156,,156,,,154,,,,,,,156',
'156,156,,156,,156,,156,,156,156,156,156,,,,,,,,,154,,,,,,,156,,,,156',
'156,,,156,156,156,156,156,156,,156,156,157,,157,,,156,,,,,,,157,157',
'157,,157,252,157,,157,,157,157,157,157,,,,,,252,,252,156,252,,252,,',
',157,,,,157,157,,,157,157,157,157,157,157,,157,157,252,,,246,,157,,',
'252,252,252,252,252,252,,252,252,246,,246,,246,252,246,,,,253,,,,,,',
'157,,,,,,,253,,253,246,253,,253,,,,252,,,246,246,,,,246,246,,,,,,246',
',253,,,,,,,,253,253,253,253,253,253,,253,253,9,,,,,253,,,,,246,,9,9',
'9,,9,,9,,9,,9,9,9,9,,,,,,,,,253,,,,,,,9,,,,9,9,,388,9,9,9,9,9,9,,9,9',
',,388,388,388,9,388,,388,,388,,388,388,388,388,,,,,,,,,,,,,,,,388,,',
'9,388,388,,459,388,388,388,388,388,388,,388,388,,,459,459,459,388,459',
'255,459,,459,,459,459,459,459,,,,,255,255,,255,,255,,255,,255,,459,',
',388,459,459,,,459,459,459,459,459,459,,459,459,255,,,245,,459,,,255',
'255,255,255,255,255,,255,255,245,,245,,245,255,245,,,,256,,,,,,,459',
',,,,,256,256,,256,245,256,,256,,256,,255,,,245,245,,,,245,245,,,,,,245',
',256,,,,,,,,256,256,256,256,256,256,,256,256,257,,,,,256,,,,,245,,,257',
'257,,257,,257,,257,,257,,,,,,,,,,,,256,,,,,,,257,,,,,258,,,257,257,257',
'257,257,257,,257,257,258,258,258,,258,257,258,,258,,258,258,258,258',
',,,,,,,,,,,,,,,258,,,,,257,,430,258,258,258,258,258,258,,258,258,,,430',
'430,430,258,430,,430,,430,,430,430,430,430,,,,,,,,,,,,,,,,430,,,258',
'430,430,,431,430,430,430,430,430,430,,430,430,,,431,431,431,430,431',
',431,,431,,431,431,431,431,,,,,,,,,,,,,,,,431,,,430,431,431,,432,431',
'431,431,431,431,431,,431,431,,,432,432,432,431,432,,432,,432,,432,432',
'432,432,,,,,,,,,,,,,,,,432,,,431,432,432,,433,432,432,432,432,432,432',
',432,432,,,433,433,433,432,433,,433,,433,,433,433,433,433,,,,,,,,,,',
',,,,,433,,,432,433,433,,437,433,433,433,433,433,433,,433,433,,,437,437',
'437,433,437,,437,,437,,437,437,437,437,,,,,,,,,,,,,,,,437,,,433,437',
'437,,,437,437,437,437,437,437,274,437,437,,,,,,437,,,,274,274,274,274',
'274,,274,,274,,274,274,274,274,,,,,,,,,,,,437,,,,274,,,,274,274,,,274',
'274,274,274,274,274,209,274,274,,,,,,274,,,,209,209,209,209,209,,209',
',209,,209,209,209,209,,,,,,,,,,,,274,,,,209,,,,209,209,,269,209,209',
'209,209,209,209,,209,209,,,269,269,269,209,269,,269,,269,,269,269,269',
'269,,,,,,,,,,,,,,,,269,,,209,269,269,,197,269,269,269,269,269,269,,269',
'269,,,197,197,197,269,197,,197,,197,,197,197,197,197,,,,,,,,,,,,,,,',
'197,,,269,197,197,,259,197,197,197,197,197,197,,197,197,,,259,259,259',
'197,259,,259,,259,,259,259,259,259,197,197,,,,,,,,,,,,,,259,,,197,,259',
',,259,259,259,259,259,259,260,259,259,,,260,,,259,,,,260,260,260,,260',
',260,,260,,260,260,260,260,,,,,,,,,,,,259,,,,260,,,,260,260,,264,260',
'260,260,260,260,260,,260,260,,,264,264,264,260,264,,264,,264,,264,264',
'264,264,,,,,,,,,,,,,,,,264,,,260,264,264,,,264,264,264,264,264,264,',
'264,264,,268,268,268,268,264,268,268,268,,268,,268,268,,,,,,,268,268',
'268,,,,268,,,,,,,,264,,,,268,268,,,,,,,,,,,,268,268,268,268,268,268',
'268,268,268,268,268,268,410,410,410,410,,410,410,410,,410,,410,410,',
',,,,,410,410,410,,,,410,,,,,,,,,,,,410,410,,,,,,,,,,,,410,410,410,410',
'410,410,410,410,410,410,410,410,384,384,384,384,,384,384,384,,384,,384',
'384,,,,,,,384,384,384,,,,384,,,,,,,,,,,,384,384,,,,,,,,,,,,384,384,384',
'384,384,384,384,384,384,384,384,384,340,340,340,340,,340,340,340,,340',
',340,340,,,,,,,340,340,340,,,,340,,,,,,,,,,,,340,340,,,,,,,,,,,,340',
'340,340,340,340,340,340,340,340,340,340,340,342,342,342,342,,342,342',
'342,,342,,342,342,,,,,,,342,342,342,,,,342,,,,,,,,,,,,342,342,,,,,,',
',,,,,342,342,342,342,342,342,342,342,342,342,342,342,376,376,376,376',
',376,376,376,,376,,376,376,,,,,,,376,376,376,,,,376,,,,,,,,,,,,376,376',
',,,,,,,,,,,376,376,376,376,376,376,376,376,376,376,376,376' ]
        racc_action_check = arr = ::Array.new(10508, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   515,   nil,   nil,   184,   489,   nil,   891,   488,  9188,
   649,   742,   485,   nil,   nil,   nil,   209,  1021,  1114,  1207,
  1300,  1393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,  1579,   -21,
   372,   416,  1951,  2044,  2137,   206,    15,    91,   429,   677,
   113,   165,   173,   216,   246,   214,   154,   nil,   nil,   nil,
  3346,  3439,  3532,   nil,   nil,   nil,   nil,  8740,   nil,   327,
   323,   nil,  3904,   nil,   392,  4090,   378,  4276,  4369,  4462,
  4555,  4648,  4741,  4834,  4927,  5020,  5113,  5206,  5299,  5392,
  5485,  5578,  5671,  5764,  5857,  5950,  6043,  6136,  6229,  6322,
  6415,  6508,  6601,  6694,  6787,  6880,   nil,   -22,   376,  7159,
  7252,   349,   348,  7531,    89,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   480,   nil,   nil,  1121,   573,  1205,
  1214,   248,   233,   nil,   227,   144,   nil,   206,   188,    32,
   nil,   128,   -35,  8182,  8929,   nil,  8987,  9045,   299,   303,
   294,  7903,   114,   nil,    99,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   319,    63,   299,   190,   201,   274,   nil,   nil,
   nil,   nil,   nil,   nil,   365,   nil,    86,   nil,   nil,   378,
   nil,   232,   nil,   nil,   212,  2695,   227,  9919,  2602,   nil,
   418,   nil,   nil,   nil,   nil,   438,   441,   474,   475,  9823,
   482,  2230,    -1,     6,    79,   -18,  1765,   835,   556,   nil,
   nil,   113,    15,    46,    67,     4,   392,   387,   578,   490,
   852,   108,    -4,    -9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1028,   749,   842,  9345,  9106,  1019,  1112,   973,
  8832,  8876,  9062,  9130,  8815,  9301,  9369,  9427,  9473,  9967,
 10022,   nil,   nil,  2323, 10070,   426,   nil,   nil, 10103,  9871,
   373,   nil,   395,   370,  9768,   nil,   370,   nil,   115,   195,
   397,   nil,   nil,  2881,   373,   nil,  3067,  3160,  3253,   319,
   345,   297,   nil,   nil,   320,   nil,   nil,   nil,   nil,   nil,
   304,   276,   -24,   nil,    93,   nil,  3718,  3811,  3997,   148,
   128,   121,    16,   nil,   387,   759,   -28,   -31,    42,  7717,
   115,   nil,  7810,  7996,   nil,   nil,   nil,   nil,  8089,   nil,
   nil,   nil,   nil,   131,   nil,   nil,   nil,   nil,   135,   144,
 10289,   154, 10351,  3625,  8647,  8554,  8461,   207,   nil,   225,
  8368,   237,   nil,   nil,   nil,   nil,   nil,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   244,  8275, 10413,   273,   nil,    22,
   nil,   279,   nil,   298, 10227,   nil,   244,     4,  9236,   330,
   334,   nil,  7624,   343,   279,   103,  7438,   nil,   nil,  7345,
   nil,   349,   158,   360,   341,    -3,  7066,   nil,  6973,  4183,
 10165,   nil,   385,   nil,   806,   nil,   nil,   390,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   328,   127,   389,   nil,   nil,
  9521,  9569,  9617,  9665,   408,  2974,   nil,  9713,   413,   nil,
   nil,     9,  2788,   nil,   nil,   nil,   404,   405,   423,   nil,
  2509,   nil,   nil,  2416,   430,   nil,  1858,   nil,   nil,  9284,
    32,   nil,  1672,   442,   418,   nil,   453,   454,   nil,   nil,
   458,   nil,   nil,   461,   465,  1486,   nil,   928,   nil,   nil,
   475,   444,   nil,   nil,   nil,   nil,   478,   nil,   nil,   482,
   483,   nil,    67,   nil,   nil,   463,   nil,   370,   277,   nil,
   nil,   496,   501,   nil,   502,   nil,    91,   nil,   nil,   nil,
   nil,   506,   nil,   509,   nil,   514,   nil,   nil,   nil,   nil,
   nil,   482,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -294,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -294,  -294,  -190,   -33,   -34,   -35,   -36,  -294,  -294,  -294,
  -294,  -294,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,  -294,  -294,
   -96,  -100,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,
  -294,  -242,  -265,  -214,  -215,  -216,  -217,  -211,  -212,  -213,
  -294,  -294,  -294,  -238,  -239,  -240,  -241,  -294,  -244,  -294,
  -257,  -260,  -294,  -266,  -294,  -294,    -7,  -294,  -294,  -294,
  -294,  -294,  -294,  -294,  -294,  -137,  -294,  -294,  -294,  -294,
  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,  -294,
  -294,  -294,  -294,  -294,  -294,  -294,   -94,  -294,  -132,  -293,
  -293,   -22,   -23,  -294,  -293,  -156,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -190,  -294,  -153,  -154,   -47,  -190,   -48,
   -55,  -294,  -294,   -14,  -267,   -91,   -95,  -206,  -294,  -265,
   -97,  -293,  -294,  -294,  -294,  -108,  -294,  -294,  -293,  -293,
  -294,  -294,  -267,  -167,  -169,  -170,  -171,  -172,  -173,  -175,
  -176,  -242,  -293,  -232,  -234,  -237,  -233,  -267,  -219,  -228,
  -229,  -230,  -235,  -236,  -267,  -221,  -294,  -224,  -225,  -294,
  -243,  -294,  -248,  -251,  -294,  -255,  -294,  -294,  -294,   526,
    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -294,
  -267,  -294,   -87,   -88,   -89,  -285,  -278,  -284,  -272,  -138,
  -141,  -214,  -215,  -216,  -217,  -294,  -275,  -289,  -190,  -292,
  -281,  -287,  -212,  -213,  -271,  -276,  -277,  -279,  -280,  -282,
  -290,  -291,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -46,   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,
  -294,   -58,  -126,  -294,   -62,  -267,  -101,  -102,  -137,  -136,
  -294,  -135,  -294,  -269,  -294,   -28,  -293,  -191,  -294,  -294,
  -294,   -59,   -60,  -268,  -294,   -93,  -294,  -294,  -255,  -294,
  -294,  -294,  -182,  -106,  -267,  -196,  -198,  -199,  -200,  -201,
  -203,  -294,  -294,  -265,  -294,   -99,  -294,  -294,  -294,  -294,
  -294,  -294,  -294,  -164,  -293,  -268,  -294,  -293,  -294,  -268,
  -294,  -222,  -294,  -294,  -245,  -246,  -247,  -249,  -294,  -252,
  -253,  -254,  -256,  -267,  -258,  -261,  -263,  -264,    -8,  -294,
  -137,  -294,  -268,  -294,  -294,  -294,  -294,  -267,  -128,  -294,
  -268,  -267,  -140,  -142,  -143,  -144,  -145,  -294,  -272,  -273,
  -274,  -275,  -278,  -281,  -283,  -284,  -285,  -286,  -287,  -288,
  -289,  -292,  -133,  -134,  -294,  -270,  -137,  -294,  -159,  -294,
  -192,  -267,  -193,  -267,  -137,   -15,   -90,  -294,  -208,  -294,
  -294,  -103,  -294,  -180,  -294,  -268,  -294,  -204,  -205,  -294,
   -98,  -294,  -111,  -294,  -117,  -294,  -294,  -121,  -293,  -293,
  -137,  -163,  -294,  -177,  -294,  -168,  -174,  -294,  -218,  -231,
  -220,  -223,  -226,  -227,  -250,  -294,  -294,  -267,   -26,  -139,
  -148,  -146,  -147,  -130,  -294,  -268,   -61,   -63,  -294,   -25,
   -29,  -267,  -293,  -160,  -161,  -162,  -294,  -294,  -267,   -92,
  -294,  -207,  -209,  -255,  -294,  -105,  -294,  -107,  -197,  -202,
  -111,  -110,  -294,  -294,  -117,  -116,  -294,  -294,  -120,  -122,
  -294,  -157,  -158,  -294,  -267,  -294,  -178,  -293,  -259,  -262,
  -294,   -30,  -127,  -129,  -131,   -27,  -294,  -194,  -195,  -294,
  -294,  -104,  -294,  -109,  -112,  -294,  -115,  -294,  -293,  -149,
  -150,  -294,  -294,  -166,  -294,   -24,   -31,  -155,  -152,  -210,
  -181,  -294,  -114,  -294,  -119,  -294,  -124,  -125,  -151,  -165,
  -179,  -269,  -113,  -118,  -123,   -32 ]

racc_goto_table = [
     2,   273,   137,   139,   140,   125,   141,   142,   167,   271,
   271,   165,   147,   262,   265,   150,   331,   190,   335,   144,
   290,   210,   374,   148,   181,   181,   415,   134,   294,   443,
   407,    86,   470,   473,   143,   121,   122,   154,   156,   157,
   347,   292,   465,   270,   272,   461,   177,   184,   158,   159,
   480,   440,   377,   172,   429,   412,   179,   179,   179,   515,
   416,   458,   398,   192,   397,   406,   486,   197,   160,   494,
   391,   422,   333,   201,   202,   203,   204,   261,   329,   330,
   209,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   264,   504,   496,   493,   269,   269,     3,   327,   274,   389,
   285,   328,   200,   326,   193,   147,   205,   206,   207,   208,
   195,     1,   276,   nil,   304,   476,   nil,   280,   469,   nil,
   nil,   125,   nil,   nil,   nil,   nil,   147,   nil,   nil,   143,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   nil,   nil,
   nil,   nil,   nil,   311,   381,   383,   309,   310,   nil,   147,
   nil,   312,   348,   nil,   nil,   nil,   378,   159,   nil,   172,
   317,   nil,   nil,   284,   nil,   nil,   nil,   nil,   147,   167,
   nil,   nil,   165,   nil,   338,   387,   417,   nil,   nil,   148,
   nil,   314,   nil,   nil,   351,   332,   139,   nil,   339,   nil,
   nil,   154,   156,   157,   413,   nil,   318,   292,   nil,   nil,
   nil,   nil,   nil,   320,   nil,   nil,   nil,   nil,   nil,   158,
   159,   125,   nil,   nil,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,
   nil,   147,   147,   nil,   nil,   nil,   nil,   479,   260,   nil,
   nil,   nil,   nil,   nil,   393,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   167,   nil,   427,   165,   424,   385,
   525,   264,   388,   419,   490,   nil,   nil,   423,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   332,   nil,
   nil,   nil,   nil,   264,   349,   nil,   nil,   nil,   472,   472,
   nil,   nil,   441,   nil,   nil,   179,   401,   403,   179,   179,
   448,   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   394,   nil,   nil,   nil,   nil,   430,   431,
   432,   433,   472,   nil,   483,   437,   474,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   449,   nil,   nil,   nil,   492,   nil,   nil,   147,   nil,
   274,   nil,   425,   167,   nil,   nil,   165,   472,   nil,   nil,
   nil,   nil,   444,   nil,   nil,   nil,   434,   nil,   nil,   nil,
   438,   459,   nil,   nil,   521,   385,   nil,   nil,   516,   nil,
   nil,   264,   454,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   446,   nil,   447,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   437,   nil,   nil,   nil,   nil,
   nil,   264,   nil,   nil,   nil,   nil,   nil,   154,   nil,   nil,
   nil,   nil,   nil,   332,   nil,   nil,   481,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   485,   nil,   nil,   nil,   nil,   502,   nil,   489,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   274,   nil,   nil,   nil,   511,   nil,   513,   517,   nil,
   nil,   nil,   nil,   501 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    66,     6,     6,    41,    58,
    58,    42,    43,    59,    22,    45,    84,    94,   101,     8,
    49,    11,    14,    83,    88,    88,    75,    69,    51,    72,
    56,     5,    68,    68,     6,     9,     9,    10,    10,    10,
    60,    58,    54,    62,    62,    53,    85,    85,    66,    66,
    12,    16,    71,    66,    63,    74,     6,     6,     6,    57,
    77,    78,    79,     6,    81,    55,    68,    10,    69,    52,
    50,    87,    51,     6,     6,     6,     6,    21,    90,    91,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    68,    54,    53,    10,    10,     3,    95,    10,    84,
    45,    96,     5,    98,    99,    43,     9,     9,     9,     9,
   100,     1,    67,   nil,     8,    75,   nil,    66,    56,   nil,
   nil,    66,   nil,   nil,   nil,   nil,    43,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,   nil,
   nil,   nil,   nil,    66,    51,    51,    67,    67,   nil,    43,
   nil,     2,    59,   nil,   nil,   nil,    58,    66,   nil,    66,
    67,   nil,   nil,    15,   nil,   nil,   nil,   nil,    43,    41,
   nil,   nil,    42,   nil,     6,    22,    49,   nil,   nil,    83,
   nil,    15,   nil,   nil,    11,     2,    10,   nil,     2,   nil,
   nil,    10,    10,    10,    58,   nil,    15,    58,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    66,
    66,    66,   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,    43,    43,   nil,   nil,   nil,   nil,   101,    10,   nil,
   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,    11,    42,    94,     6,
    14,    10,    10,    88,    84,   nil,   nil,    88,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,    10,    15,   nil,   nil,   nil,    58,    58,
   nil,   nil,    11,   nil,   nil,     6,     2,     2,     6,     6,
    11,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,    10,    10,
    10,    10,    58,   nil,    59,    10,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,    22,   nil,   nil,    43,   nil,
    10,   nil,    15,    41,   nil,   nil,    42,    58,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   nil,    15,   nil,   nil,   nil,
    15,    10,   nil,   nil,    13,     6,   nil,   nil,    58,   nil,
   nil,    10,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,     2,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,     2,   nil,     2,     2,   nil,
   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,   121,     0,   106,   nil,    27,   -14,   nil,   -29,    25,
   -15,   -74,  -377,  -122,  -251,    29,  -324,   nil,   nil,   nil,
   nil,   -37,  -101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -51,   -48,   -37,   nil,   -35,   nil,   nil,   nil,  -131,
  -220,  -124,  -393,  -357,  -362,  -243,  -278,  -439,  -110,  -101,
  -223,   nil,   -76,  -288,   nil,   nil,    -7,    -2,  -376,    11,
   nil,  -224,  -350,   nil,  -259,  -289,   nil,  -256,  -334,  -240,
   nil,  -237,   nil,   -26,  -179,   -24,   nil,  -251,   -46,   nil,
  -116,  -115,   nil,   nil,   -60,   -84,   -80,   nil,   -78,    35,
    40,  -179 ]

racc_goto_default = [
   nil,   nil,   471,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   275,    13,    14,    15,
    16,   nil,   405,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    48,   nil,    50,    51,   151,   nil,
   nil,   nil,   155,   nil,   nil,   nil,   nil,   nil,   277,   nil,
   nil,   118,   nil,   219,   225,   220,    57,   nil,   nil,   nil,
   124,   nil,   nil,   162,   nil,   163,   164,   168,   295,   296,
   297,   298,   299,   302,   nil,   nil,   186,   188,   189,   180,
    73,    74,    75,    77,   nil,   nil,   nil,   191,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 101, :_reduce_1,
  1, 101, :_reduce_2,
  0, 101, :_reduce_3,
  1, 102, :_reduce_4,
  1, 104, :_reduce_5,
  3, 104, :_reduce_6,
  2, 104, :_reduce_7,
  1, 105, :_reduce_8,
  3, 105, :_reduce_9,
  1, 106, :_reduce_none,
  3, 106, :_reduce_11,
  3, 106, :_reduce_12,
  3, 106, :_reduce_13,
  1, 108, :_reduce_14,
  3, 108, :_reduce_15,
  1, 107, :_reduce_none,
  3, 107, :_reduce_17,
  3, 107, :_reduce_18,
  3, 107, :_reduce_19,
  3, 107, :_reduce_20,
  1, 109, :_reduce_none,
  2, 109, :_reduce_22,
  2, 109, :_reduce_23,
  7, 109, :_reduce_24,
  5, 109, :_reduce_25,
  5, 109, :_reduce_26,
  4, 116, :_reduce_27,
  1, 113, :_reduce_28,
  3, 113, :_reduce_29,
  1, 112, :_reduce_30,
  2, 112, :_reduce_31,
  4, 112, :_reduce_32,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_37,
  3, 110, :_reduce_38,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  2, 110, :_reduce_47,
  2, 110, :_reduce_48,
  3, 110, :_reduce_49,
  3, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  2, 110, :_reduce_55,
  3, 110, :_reduce_56,
  3, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  5, 120, :_reduce_61,
  1, 122, :_reduce_62,
  3, 122, :_reduce_63,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_85,
  1, 117, :_reduce_86,
  1, 117, :_reduce_87,
  1, 117, :_reduce_88,
  1, 117, :_reduce_89,
  4, 119, :_reduce_90,
  2, 119, :_reduce_91,
  5, 119, :_reduce_92,
  3, 119, :_reduce_93,
  2, 144, :_reduce_94,
  2, 144, :_reduce_95,
  1, 124, :_reduce_96,
  2, 124, :_reduce_97,
  4, 146, :_reduce_98,
  3, 146, :_reduce_99,
  1, 146, :_reduce_100,
  3, 147, :_reduce_101,
  3, 147, :_reduce_102,
  3, 145, :_reduce_103,
  3, 150, :_reduce_104,
  2, 150, :_reduce_105,
  2, 148, :_reduce_106,
  4, 148, :_reduce_107,
  2, 127, :_reduce_108,
  5, 152, :_reduce_109,
  4, 152, :_reduce_110,
  0, 153, :_reduce_none,
  2, 153, :_reduce_112,
  4, 153, :_reduce_113,
  3, 153, :_reduce_114,
  6, 128, :_reduce_115,
  5, 128, :_reduce_116,
  0, 154, :_reduce_none,
  4, 154, :_reduce_118,
  3, 154, :_reduce_119,
  5, 126, :_reduce_120,
  1, 155, :_reduce_121,
  2, 155, :_reduce_122,
  5, 156, :_reduce_123,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_127,
  1, 160, :_reduce_128,
  3, 160, :_reduce_129,
  3, 159, :_reduce_130,
  6, 125, :_reduce_131,
  2, 125, :_reduce_132,
  3, 161, :_reduce_133,
  3, 161, :_reduce_134,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  0, 111, :_reduce_137,
  1, 111, :_reduce_138,
  3, 111, :_reduce_139,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 163, :_reduce_146,
  3, 163, :_reduce_147,
  3, 163, :_reduce_148,
  6, 129, :_reduce_149,
  6, 130, :_reduce_150,
  7, 118, :_reduce_151,
  7, 118, :_reduce_152,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  7, 131, :_reduce_155,
  1, 170, :_reduce_156,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_160,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  4, 133, :_reduce_163,
  3, 133, :_reduce_164,
  7, 132, :_reduce_165,
  6, 132, :_reduce_166,
  1, 173, :_reduce_167,
  3, 173, :_reduce_168,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_171,
  1, 175, :_reduce_none,
  1, 176, :_reduce_173,
  3, 176, :_reduce_174,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 174, :_reduce_none,
  2, 174, :_reduce_178,
  7, 135, :_reduce_179,
  2, 149, :_reduce_180,
  5, 149, :_reduce_181,
  1, 149, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_190,
  1, 167, :_reduce_191,
  2, 167, :_reduce_192,
  2, 167, :_reduce_193,
  4, 167, :_reduce_194,
  4, 167, :_reduce_195,
  1, 151, :_reduce_196,
  3, 151, :_reduce_197,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  3, 181, :_reduce_202,
  1, 181, :_reduce_203,
  2, 182, :_reduce_204,
  2, 180, :_reduce_205,
  1, 183, :_reduce_206,
  4, 183, :_reduce_207,
  4, 136, :_reduce_208,
  5, 137, :_reduce_209,
  7, 137, :_reduce_210,
  1, 123, :_reduce_211,
  1, 138, :_reduce_212,
  1, 138, :_reduce_213,
  1, 138, :_reduce_214,
  1, 138, :_reduce_215,
  1, 138, :_reduce_216,
  1, 138, :_reduce_217,
  4, 139, :_reduce_218,
  2, 139, :_reduce_219,
  4, 139, :_reduce_220,
  2, 139, :_reduce_221,
  3, 140, :_reduce_222,
  4, 140, :_reduce_223,
  2, 140, :_reduce_224,
  1, 186, :_reduce_225,
  3, 186, :_reduce_226,
  3, 187, :_reduce_227,
  1, 188, :_reduce_none,
  1, 188, :_reduce_229,
  1, 185, :_reduce_230,
  3, 185, :_reduce_231,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 190, :_reduce_241,
  1, 190, :_reduce_242,
  2, 191, :_reduce_243,
  1, 193, :_reduce_244,
  1, 195, :_reduce_245,
  1, 196, :_reduce_246,
  2, 194, :_reduce_247,
  1, 197, :_reduce_248,
  1, 198, :_reduce_249,
  2, 198, :_reduce_250,
  2, 192, :_reduce_251,
  2, 199, :_reduce_252,
  2, 199, :_reduce_253,
  3, 103, :_reduce_254,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 200, :_reduce_257,
  2, 200, :_reduce_258,
  4, 200, :_reduce_259,
  1, 134, :_reduce_260,
  3, 134, :_reduce_261,
  5, 134, :_reduce_262,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 143, :_reduce_265,
  1, 141, :_reduce_266,
  0, 115, :_reduce_none,
  1, 115, :_reduce_268,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 158, :_reduce_293 ]

racc_reduce_n = 294

racc_shift_n = 526

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION_R => 87,
  :CONSUMES_R => 88,
  :PRODUCES_R => 89,
  :SITE_R => 90,
  :APPLICATION => 91,
  :PRODUCES => 92,
  :CONSUMES => 93,
  :SITE => 94,
  :LOW => 95,
  :HIGH => 96,
  :LISTSTART => 97,
  :SPLAT => 98,
  :MODULO => 99 }

racc_nt_base = 100

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_60(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_61(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_89(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_97(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_103(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_105(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_108(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_112(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_113(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_114(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_118(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_119(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 399)
  def _reduce_120(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_122(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_123(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_127(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_129(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_130(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_133(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_134(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_138(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_139(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_146(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_147(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_148(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_150(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_151(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 529)
  def _reduce_152(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_155(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_156(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_163(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_164(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_165(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_166(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_167(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_168(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_174(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_178(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_179(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[5], val[3]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_180(val, _values, result)
     result = val[1] ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_181(val, _values, result)
     result = val[1][*val[3]] ; loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_190(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_191(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_192(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_195(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_196(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_197(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_203(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_204(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_205(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_206(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_207(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_208(val, _values, result)
          result = add_definition(Factory.TYPE_ASSIGNMENT(val[1], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_209(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_210(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_211(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_215(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_216(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_217(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_218(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 735)
  def _reduce_219(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_220(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_221(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_222(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_223(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_224(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_225(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_226(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_227(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_230(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_231(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_242(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_243(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_244(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_245(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_246(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_247(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_248(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_249(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_250(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 789)
  def _reduce_251(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_252(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_253(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_254(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 255 omitted

# reduce 256 omitted

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_257(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_258(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_259(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_260(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_261(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 810)
  def _reduce_262(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_265(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 819)
  def _reduce_266(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 267 omitted

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_268(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

module_eval(<<'.,.,', 'egrammar.ra', 856)
  def _reduce_293(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
